1.Napisz w 3-ch wersjach funkcję, która liczy iloczyn elementów listy o parzystych indeksach (czyli 'domnaża' co drugi począwszy od pierwszego). Zakładamy, że lista zawiera liczby (nie trzeba tego sprawdzać) i że iloczyn dla listy pustej wynosi 1. W pierwszej wersji niech będzie to 'zwykła' funkcja rekurencyjna.

W drugiej wersji niech będzie to funkcja rekurencyjna z rekurencją ogonową. W trzeciej wersji niech będzie to funkcja wykorzystująca funkcję foldl/reduce

2. Napisz funkcję norm, która znormalizuje listę liczb, czyli policzy pierwiastek sumy kwadratów jej elementów, a następnie podzieli każdy element przez wyliczony pierwiastek. Funkcja jako argument otrzymuje listę liczb. Do policzenia sumy kwadratów proszę wykorzystać funkcję foldl/reduce (z wyrażeniem lambda). Do podzielenia elementów proszę użyć funkcji map (z częściową aplikacją operatora dzielenia (haskell) lub operatora mnożenia i przemnożenia przez odwrotność wyliczonego pierwiastka (python)).

3. Napisz funkcję words, która otrzymuje zdanie (jeden napis złożony z wyrazów rozdzielonych spacjami) a zwraca listę wyrazów (listę napisów). Należy zastosować pomocniczą funkcję rekurencyjną, wykorzystującą rekurencję ogonową, z trzema parametrami: zdanie, wyraz i lista. Parametr zdanie to parametr funkcji words, wyraz to aktualnie składany wyraz natomiast parametr lista to lista wynikowa. Jeżeli przechodząc po zdaniu funkcja trafi na literę różną od spacji to dodaje ją do wyraz, a jak trafi na spację to dodaje wyraz do lista, ustawiając jednocześnie wyraz na pusty napis. Wywołanie funkcji pomocniczej w words to: pomoc zdanie (haskell) / 3333 pomoc(zdanie, []) (python
